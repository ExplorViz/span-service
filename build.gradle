plugins {
  id 'java'
  id 'io.quarkus'

  id 'com.adarshr.test-logger' version '3.2.0'
  id "org.kordamp.gradle.jandex" version "2.0.0"

  id "org.jetbrains.kotlin.jvm" version "2.0.21"
  id "org.jetbrains.kotlin.plugin.allopen" version "2.0.21"

  id "io.gitlab.arturbosch.detekt" version "1.23.7"
  id "com.diffplug.spotless" version "6.25.0"
}

apply from: 'code-analysis/code-analysis.gradle'

repositories {
  mavenCentral()
  mavenLocal()
  maven {
    url "https://packages.confluent.io/maven/"
  }
}

dependencies {
  implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")

  implementation 'io.quarkus:quarkus-container-image-jib'

  implementation "io.quarkus:quarkus-kotlin"
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

  // Needed for scheduled jobs
  implementation 'io.quarkus:quarkus-scheduler'

  implementation "io.quarkus:quarkus-grpc"

  implementation "io.opentelemetry.proto:opentelemetry-proto:0.19.0-alpha"

  // Quarkus Cassandra Platform + DataStax Cassandra Driver
  implementation enforcedPlatform("${quarkusPlatformGroupId}:quarkus-cassandra-bom:${quarkusPlatformVersion}")
  implementation 'com.datastax.oss.quarkus:cassandra-quarkus-client'

  // Kafka Streams + Confluent Schema Registry + Avro (de)serializer
  implementation 'io.quarkus:quarkus-kafka-streams'
  implementation 'io.quarkus:quarkus-confluent-registry-avro'
  implementation group: 'io.confluent', name: 'kafka-streams-avro-serde', version: "${confluentAvroSerdeVersion}"

  //implementation("org.jboss.slf4j:slf4j-jboss-logmanager")
  //testImplementation("org.jboss.slf4j:slf4j-jboss-logmanager")
  //integrationTestImplementation("org.jboss.slf4j:slf4j-jboss-logmanager")

  // REST implementation (Jackson serialization) + MicroProfile OpenAPI specification
  implementation 'io.quarkus:quarkus-rest-jackson'
  implementation 'io.quarkus:quarkus-smallrye-openapi'

  testImplementation 'io.quarkus:quarkus-junit5'
  testImplementation 'io.quarkus:quarkus-junit5-mockito'

  // Integration / Api Tests
  testImplementation 'io.rest-assured:rest-assured'
  integrationTestImplementation 'io.rest-assured:rest-assured'
  testImplementation 'com.datastax.oss.quarkus:cassandra-quarkus-test-framework'
  integrationTestImplementation 'com.datastax.oss.quarkus:cassandra-quarkus-test-framework'
  testImplementation "org.testcontainers:kafka:1.17.5"
  integrationTestImplementation "org.testcontainers:kafka:1.17.5"

  // Integration Testing
  integrationTestImplementation 'io.quarkus:quarkus-junit5'
}

group 'net.explorviz'
version '1.0-SNAPSHOT'

compileJava {
  options.encoding = 'UTF-8'
  options.compilerArgs << '-parameters'
}

compileTestJava {
  options.encoding = 'UTF-8'
}

kotlin {
  jvmToolchain(21)
}

java {
  sourceCompatibility = JavaVersion.VERSION_21
  targetCompatibility = JavaVersion.VERSION_21
}

// Tasks Setups //

sourceSets {
  integrationTest {
    java.srcDir file('src/integrationTest/java')
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
  }
}

task integrationTest(type: Test) {
  description = 'Runs integration tests.'
  group = 'verification'

  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  shouldRunAfter test
}

configurations {
  integrationTestImplementation.extendsFrom implementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.setCanBeResolved(true)
  integrationTestRuntimeOnly.setCanBeResolved(true)
}

// Regarding jandex dependency for each task
// https://github.com/kordamp/jandex-gradle-plugin/issues/9

tasks.named('imageBuild') {
  dependsOn 'jandex'
}

tasks.named('imagePush') {
  dependsOn 'jandex'
}

tasks.named('checkstyleMain') {
  dependsOn 'jandex'
}

tasks.named('pmdMain') {
  dependsOn 'jandex'
}

tasks.named('compileTestJava') {
  dependsOn 'jandex'
}

tasks.named('test') {
  dependsOn 'jandex'
}

tasks.named('compileIntegrationTestJava') {
  dependsOn 'jandex'
}

tasks.named('integrationTest') {
  dependsOn 'jandex'
}

tasks.named('quarkusDependenciesBuild') {
  dependsOn 'jandex'
}

spotless {
  kotlin {
    ktfmt().kotlinlangStyle().configure {
      it.setMaxWidth(120)
    }
  }
}


tasks.withType(JavaCompile).configureEach {
  // Turn on all javac warnings except classfile and processing, which produces many false-positives about annotations
  options.compilerArgs << "-Xlint:all" << "-Xlint:-classfile" << "-Xlint:-processing"
}

test {
  useJUnitPlatform()
  testLogging.showStandardStreams = true
}

// Needed by Mockito since closed Kotlin classes cannot be mocked
allOpen {
  annotation("jakarta.ws.rs.Path")
  annotation("jakarta.enterprise.context.ApplicationScoped")
  annotation("jakarta.persistence.Entity")
  annotation("io.quarkus.test.junit.QuarkusTest")
}

integrationTest {
  useJUnitPlatform()
  testLogging.showStandardStreams = true
}
